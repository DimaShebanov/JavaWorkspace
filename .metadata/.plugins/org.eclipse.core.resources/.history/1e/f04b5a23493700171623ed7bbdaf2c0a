package client.gui;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.peer.ComponentPeer;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JPanel;

import com.google.gson.Gson;

import clientserver.CCon;
import clientserver.ClientWriter;
import logic.RMCommand;
import model.MFigure;
import model.RMData;

public class RMPanel extends JPanel implements MouseListener
{
	Point p = null;
	public RMData data = new RMData();
	public RMCommand rmc;

	public Figure curfig = null;
	public CCon con;
	Gson json = new Gson();


	public RMPanel()
	{
		setLayout(null);
		setBounds(200, 100, 600, 500);
		addMouseListener(this);
		//		con.writer.send("hello");
	}

	public ArrayList<MFigure> getMemento()
	{
		ArrayList<MFigure> mfigs = new ArrayList<>();
		Component[] comps = getComponents();
		for (Component comp : comps)
		{
			Figure fig = (Figure) comp;
			mfigs.add(fig.getMemento());
		}
		return mfigs;
	}



	public void setMemento(ArrayList<MFigure> figs)
	{
		int tmpfigNum = -1;
		if(curfig != null)
		{
			tmpfigNum = curfig.data.number;
		}
		removeAll();
		for (MFigure mfig : figs)
		{
			Rectangle r = new Rectangle(mfig.x, mfig.y, mfig.width, mfig.height);
			RMData data = new RMData(mfig.stroke, mfig.type, new Color(mfig.color), mfig.number);
			Figure newFig = new Figure(r, 
					data, 
					rmc);
			add(newFig);
			ClientWriter writer = con.writer;
			String msg = writer.MakeJSON(newFig.getMemento());
			writer.send(msg);

			if(newFig.data.number == tmpfigNum)
			{
				curfig = newFig;
			}
		}
		repaint();
		if(curfig != null)
		{
			curfig.requestFocus();
		}
	}

	public void putFigure(MFigure mfig)
	{
		for (Component comp : getComponents())
		{
			Figure figa = (Figure) comp;
			if(mfig.number == figa.data.number)
			{
				figa.setMemento(mfig);
				repaint();
				return;
			}
		}

		Rectangle r = new Rectangle(mfig.x, mfig.y, mfig.width, mfig.height);
		RMData datatmp = new RMData(mfig.stroke, mfig.type, new Color(mfig.color), mfig.number);
		if(data.number < mfig.number)
		{
			data.number = mfig.number;
		}
		Figure figure = new Figure(r, datatmp, rmc);
		add(figure);
		repaint();
	}

	@Override
	public void paint(Graphics g)
	{
		super.paint(g);
		g.setColor(Color.black);
		g.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
	}

	@Override
	public void mousePressed(MouseEvent e)
	{
		if(e.getButton() == e.BUTTON3)
		{
			getComponentPopupMenu().show();
		}
		curfig = null;
		p = e.getPoint();
		requestFocus();
	}
	@Override
	public void mouseReleased(MouseEvent e)
	{
		Rectangle r = new Rectangle(p, new Dimension(e.getX()-(int)p.getX(), e.getY()-(int)p.getY()));
		data.number++;
		Figure fig = new Figure(r, data, rmc);
		add( fig );

		repaint();

		String msg = json.toJson(fig.getMemento());
		con.writer.send(msg);


	}

	@Override
	public void mouseClicked(MouseEvent arg0){}
	@Override
	public void mouseEntered(MouseEvent arg0){}
	@Override
	public void mouseExited(MouseEvent arg0){}
}
